{"version":3,"sources":["redux/types/types.js","redux/actions/index.js","components/UI/Spinner/index.js","components/Charts/LineChart/index.js","components/UI/Header/index.js","components/Charts/PieChart/index.js","App.js","reportWebVitals.js","redux/saga.js","redux/reducers/index.js","index.js"],"names":["FETCH_CHART_DATA","SET_CHART_DATA","FETCH_CHART_DATA_FAILED","setMonthlySales","type","Spinner","styled","div","spinner","LineChart","dispatch","useDispatch","useEffect","chartData","useSelector","state","data","error","labels","months","forEach","el","push","Month","getMonths","datasets","label","monthSales","Sales_Figure","getMonthlySalesData","fill","backgroundColor","borderColor","errorHandler","style","textAlign","length","options","responsive","maintainAspectRatio","tooltips","titleFontColor","bodyFontColor","displayColors","yAlign","scales","xAxes","scaleLabel","display","labelString","fontColor","fontSize","yAxes","Toolbar","Brand","p","Header","undefined","size","colors","i","Math","floor","random","colorsArray","legend","position","enabled","callbacks","tooltipItem","dataset","datasetIndex","total","reduce","previousValue","currentValue","currentIndex","array","index","title","ChartContainer","Select","select","App","useState","chartType","setChartType","onChange","e","target","value","PieChart","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","watcherSaga","takeEvery","workerSaga","call","getSalesData","payload","put","fetch","response","json","initialState","reducer","action","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d04e64b.chunk.js","sourcesContent":["export const FETCH_CHART_DATA = \"FETCH_CHART_DATA\"\nexport const SET_CHART_DATA = \"SET_CHART_DATA\"\nexport const FETCH_CHART_DATA_FAILED = \"FETCH_CHART_DATA_FAILED\"","import { FETCH_CHART_DATA, FETCH_CHART_DATA_FAILED } from '../types/types'\n\n\nexport const setMonthlySales = () => {\n  return {\n      type: FETCH_CHART_DATA\n  };\n};\n\nexport const fetchDataFailed = () => {\n  return {\n      type: FETCH_CHART_DATA_FAILED\n  };\n};","import React from 'react';\nimport styled from 'styled-components'\n\nconst Spinner = styled.div`\n  border: 16px solid #f3f3f3;\n  border-radius: 50%;\n  border-top: 16px solid #40b9af;\n  width: 120px;\n  height: 120px;\n  animation: spin 2s linear infinite;\n  margin: auto;\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n  \n`\n\nconst spinner = () => (\n    <Spinner/>\n);\n\nexport default spinner;","import React, { useEffect } from 'react'\nimport {useSelector, useDispatch} from 'react-redux'\nimport { Line } from 'react-chartjs-2'\n\nimport { setMonthlySales } from '../../../redux/actions/index'\nimport Spinner from '../../UI/Spinner'\n\nconst LineChart = () => {\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(setMonthlySales())\n  }, [])\n\n  const chartData = useSelector(state => state.data)\n  const error = useSelector(state => state.error)\n\n  const getMonths = () => {\n    let months = [];\n    chartData.forEach(el => months.push(el.Month));\n    return months;\n  }\n\n  const getMonthlySalesData = () => {\n    let monthSales = [];\n    chartData.forEach(el => monthSales.push(el.Sales_Figure));\n    return monthSales;\n  }\n\n  const data = {\n    labels: getMonths(),\n    datasets: [\n      {\n        label: \"JBL SALES\",\n        data: getMonthlySalesData(),\n        fill: true,\n        backgroundColor: \"rgba(75,192,192,0.2)\",\n        borderColor: \"rgba(75,192,192,1)\"\n      }\n    ]\n  }\n\n  let errorHandler = (error === true) ? <h1 style={{textAlign: 'center'}}>Data can't be loaded!</h1> : <Spinner />;\n  return (\n    <div>\n      {(chartData.length !== 0) ? \n        <Line \n          data={data}\n          options={{\n            responsive: true,\n            maintainAspectRatio: true,\n            tooltips: {\n              backgroundColor: 'rgb(132, 225, 225)',\n              titleFontColor: 'rgb(10, 41, 41)',\n              bodyFontColor: 'rgb(10, 41, 41)',\n              displayColors: false,\n              yAlign: 'bottom'\n            },\n            scales: {\n              xAxes: [\n                {\n                  scaleLabel: {\n                    display: true,\n                    labelString: 'Monthly Sales via E-Commerce',\n                    fontColor: '#C7C7CC',\n                    fontSize: 20\n                  }\n                }\n              ],\n              yAxes: [\n                {\n                  scaleLabel: {\n                    display: true,\n                    labelString: 'Data in Thousands',\n                    fontColor: '#C7C7CC',\n                    fontSize: 20\n                  }\n                }\n              ]  \n            }  \n          }}\n      /> : errorHandler\n    }\n    </div>\n  )\n}\n\nexport default LineChart;","import React from 'react'\nimport styled from 'styled-components'\n\nconst Toolbar = styled.div`\n  margin: 0;\n  padding: 0;\n  align-items: center;\n  display: block;\n  height: 100%;\n  list-style-type: none;\n\n  @media (min-width: 500px) {\n    flex-flow: row;\n    display: flex;\n  }\n`\nconst Brand = styled.p`\n  color: beige;\n  font-weight: 700;\n  font-size: 40px;\n`\n\nconst Header = () => {\n  return (\n    <>\n      <Toolbar>\n        <Brand>Charts</Brand>\n      </Toolbar>\n    </>\n  )\n}\n\nexport default Header","import React, { useEffect } from 'react'\nimport {useSelector, useDispatch} from 'react-redux'\nimport { Pie } from 'react-chartjs-2'\n\nimport { setMonthlySales } from '../../../redux/actions/index'\nimport Spinner from '../../UI/Spinner'\n\nconst LineChart = () => {\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(setMonthlySales())\n  }, [])\n\n  const chartData = useSelector(state => state.data)\n  const error = useSelector(state => state.error)\n\n  const getMonths = () => {\n    let months = [];\n    if(chartData === undefined){\n      return;\n    }\n    chartData.forEach(el => months.push(el.Month));\n    return months;\n  }\n\n  const getMonthlySalesData = () => {\n    let monthSales = [];\n    if(chartData === undefined){\n      return;\n    }\n    chartData.forEach(el => monthSales.push(el.Sales_Figure));\n    return monthSales;\n  }\n\n  const dynamicColors = () => {\n    let r = Math.floor(Math.random() * 255);\n    let g = Math.floor(Math.random() * 255);\n    let b = Math.floor(Math.random() * 255);\n    return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n  };\n\n  const colorsArray = (size) => {\n    let colors = []\n    for(let i=0;i<size;i++){\n        colors.push(dynamicColors());\n    }\n    return colors;\n  }  \n\n  const data = {\n    labels: getMonths(),\n    datasets: [\n      {\n        label: \"CAR SALES\",\n        data: getMonthlySalesData(),\n        backgroundColor: colorsArray(chartData.length)\n      }\n    ]\n  }\n\n  let errorHandler = (error === true) ? <h1 style={{textAlign: 'center'}}>Data can't be loaded!</h1> : <Spinner />;\n\n  return (\n    <div>\n      {(chartData.length !== 0) ? \n        <Pie \n          data={data}\n          options={{\n            responsive: true,\n            maintainAspectRatio: true,\n            legend: {\n              position: 'bottom',\n              labels: {\n              },\n            },\n            tooltips: {\n              enabled: true,\n              backgroundColor: 'rgb(255, 225, 225)',\n              titleFontColor: 'rgb(0, 0, 0)',\n              bodyFontColor: 'rgb(0, 0, 0)',\n              displayColors: false,\n              callbacks: {\n                label: function (tooltipItem, data) {\n                  var dataset = data.datasets[tooltipItem.datasetIndex];\n                  var total = dataset.data.reduce(function (previousValue, currentValue, currentIndex, array) {\n                    return previousValue + currentValue;\n                  });\n                  var currentValue = dataset.data[tooltipItem.index];\n                  var percentage = Math.floor(((currentValue / total) * 100) + 0.5);\n                  return 'Sale ' + percentage + \"%\";\n                },                    \n                title: function (tooltipItem, data) {\n                  return data.labels[tooltipItem[0].index];\n                }\n              }  \n            }\n          }}\n      /> : \n      errorHandler }\n    </div>\n  )\n}\n\nexport default LineChart;","import React, {useState} from 'react'\nimport styled from 'styled-components'\n\nimport LineChart from './components/Charts/LineChart'\nimport Header from './components/UI/Header/index'\nimport PieChart from './components/Charts/PieChart'\n\nconst Toolbar = styled.div`\n  height: 56px;\n  width: 100%;\n  position: fixed;\n  top: 0;\n  left: 0;\n  background-color: #40b9af;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 20px;\n  box-sizing: border-box;\n  z-index: 90;\n`\n\nconst ChartContainer = styled.div`\n  position: relative;\n  margin: auto;\n  height: 80vh;\n  width: 80vw;\n  padding: 100px;\n`\nconst Select = styled.select`\n  height: 38px;\n  border: none;\n  float: right;\n  margin-right:5px;\n  background-color: #40b9af;\n`\n\nconst App  = () => {\n\n  const [chartType, setChartType] = useState('line')\n\n  const changeChart = (e) => {\n    setChartType(e.target.value)\n  }\n\n  return (\n    <>\n      <Toolbar>\n          <Header/>\n          <nav>\n            <Select onChange={changeChart}>\n            <option value=\"line\">Line Chart</option>\n            <option value=\"pie\">Pie Chart</option>\n          </Select>\n          </nav>\n      </Toolbar>\n      <ChartContainer>\n        {(chartType === 'line') ? <LineChart /> : <PieChart /> }\n      </ChartContainer>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { takeEvery, put, call } from 'redux-saga/effects';\n\nimport { FETCH_CHART_DATA, SET_CHART_DATA, FETCH_CHART_DATA_FAILED } from './types/types'\n\nexport default function* watcherSaga(){\n  yield takeEvery(FETCH_CHART_DATA,\n  \n    function* workerSaga(){\n      try {\n        const payload = yield call(getSalesData);\n        yield put({ type: SET_CHART_DATA, payload });\n      } catch (e) {\n        yield put({ type: FETCH_CHART_DATA_FAILED, payload: e });\n      }\n    }\n  )\n}\n\nfunction getSalesData() {\n  return fetch(\"https://60225861ae8f8700177df512.mockapi.io/sales\")\n    .then(response =>\n      response.json()\n    )\n}\n","import { SET_CHART_DATA, FETCH_CHART_DATA_FAILED } from '../types/types'\n\nconst initialState = {\n  data: [], \n  error: false\n}\n\nconst reducer = (state= initialState, action) => {\n  switch (action.type) {\n    case SET_CHART_DATA:\n      return {\n        ...state,\n        data: action.payload\n    };\n    case FETCH_CHART_DATA_FAILED:\n      return {\n        ...state,\n        error: true,\n        data: []\n    };\n    default:\n      return state  \n  }\n}\n\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport createSagaMiddleware from \"redux-saga\"\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport watcherSaga from './redux/saga'\nimport reducer from './redux/reducers/index'\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(reducer, applyMiddleware(sagaMiddleware))\n\nsagaMiddleware.run(watcherSaga);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>  \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}